@page "/"
@attribute [Authorize]
@using BlazorServer.UI.SharedServices
@inject IHttpContextAccessor httpContextAccessor
@inject NavigationManager navigationManager
@inject IBaseHttpClient _baseHttpClient
@inject IStringLocalizer<Resources> localizer

<PageTitle>@localizer["home"]</PageTitle>

<h1>@localizer["hello_world"]</h1>

Welcome to your new app.

<AuthorizeView>
    <NotAuthorized>
        Home
        <span>You are not logged in</span>
        <a href="/login">Login</a>
    </NotAuthorized>
    <Authorized> @* Test block only. Delete if not needed *@
        Home
        <span>Logged in as <b>@context?.User?.Identity?.Name</b></span>
        <a href="/logout">Logout</a>
    </Authorized>
    <Authorized>
        <RadzenButton Text="Get data" Click="GetData"></RadzenButton>
        <br />
        @contentStringData
        <hr />

        <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.SpaceAround" AlignItems="AlignItems.Stretch" Gap="1rem">
            <RadzenCard class="rz-w-25">
                <RadzenText TextStyle="TextStyle.H6">Radzen H6</RadzenText>
                <RadzenText TextStyle="TextStyle.Body1">
                    Lorem ipsum text.
                </RadzenText>
            </RadzenCard>
            <RadzenCard class="rz-w-25">
                <RadzenText TextStyle="TextStyle.H6">Radzen H6</RadzenText>
                <RadzenText TextStyle="TextStyle.Body1">
                    Lorem ipsum text.
                </RadzenText>
                <RadzenText TextStyle="TextStyle.Overline">
                    Lorem ipsum text.
                </RadzenText>
            </RadzenCard>
            <RadzenCard class="rz-w-25">
                <RadzenText TextStyle="TextStyle.H6">Radzen H6</RadzenText>
                <RadzenText TextStyle="TextStyle.Body1">
                    Lorem ipsum text.
                </RadzenText>
            </RadzenCard>
            <RadzenCard class="rz-w-25">
                <RadzenText TextStyle="TextStyle.H6">Radzen H6</RadzenText>
                <RadzenText TextStyle="TextStyle.Body1">
                    Lorem ipsum text.
                </RadzenText>
            </RadzenCard>
        </RadzenStack>
        <br />
        <RadzenStack Orientation="Orientation.Vertical">
            <RadzenCard>
                <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Wrap="FlexWrap.Wrap">
                    <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="0.5rem">
                        <RadzenCheckBox @bind-Value="@smooth" Name="smooth"></RadzenCheckBox>
                        <RadzenLabel Text="@localizer["smooth"]" Component="smooth" />
                    </RadzenStack>
                    <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="0.5rem">
                        <RadzenCheckBox @bind-Value="@showDataLabels" Name="dataLabels"></RadzenCheckBox>
                        <RadzenLabel Text="@localizer["data_labels"]" Component="dataLabels" />
                    </RadzenStack>
                    <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="0.5rem">
                        <RadzenCheckBox @bind-Value="@showMarkers" Name="markers"></RadzenCheckBox>
                        <RadzenLabel Text="@localizer["show_markers"]" Component="markers" />
                    </RadzenStack>                    
                </RadzenStack>
            </RadzenCard>

            <RadzenChart>
                <RadzenChartTooltipOptions Shared="true" />
                <RadzenLineSeries Smooth="@smooth" Data="@revenue2023" CategoryProperty="Date" Title="2023" LineType="LineType.Dashed" ValueProperty="Revenue">
                    <RadzenMarkers Visible="@showMarkers" MarkerType="MarkerType.Square" />
                    <RadzenSeriesDataLabels Visible="@showDataLabels" />
                </RadzenLineSeries>
                <RadzenLineSeries Smooth="@smooth" Data="@revenue2024" CategoryProperty="Date" Title="2024" ValueProperty="Revenue">
                    <RadzenMarkers Visible="@showMarkers" MarkerType="MarkerType.Circle" />
                    <RadzenSeriesDataLabels Visible="@showDataLabels" />
                </RadzenLineSeries>
                <RadzenCategoryAxis Padding="20" />
                <RadzenValueAxis Formatter="@FormatAsCurrency">
                    <RadzenGridLines Visible="true" />
                    <RadzenAxisTitle Text="@localizer["revenue_in_euro"]" />
                </RadzenValueAxis>
            </RadzenChart>
        </RadzenStack>
          
    </Authorized>
</AuthorizeView>

<RadzenRow Gap="1rem">
    <RadzenColumn Size="12" class="rz-background-color-info-lighter rz-color-on-info-lighter rz-p-5">     
        Column 1 of 4; word-break: break-all;
        <RadzenText TextStyle="TextStyle.Subtitle2">
            <div style="word-break: break-all;">UserAgent = @UserAgent</div>
        </RadzenText>
    </RadzenColumn>
    <RadzenColumn Size="4" class="rz-background-color-info-lighter rz-color-on-info-lighter rz-p-5">
        Column 2 of 4        
    </RadzenColumn>
    <RadzenColumn class="rz-background-color-info-lighter rz-color-on-info-lighter rz-p-5">
        Column 3 of 4
    </RadzenColumn>
    <RadzenColumn class="rz-background-color-info-lighter rz-color-on-info-lighter rz-p-5">
        Column 4 of 4
    </RadzenColumn>
</RadzenRow>

<p>IPAddress = @IPAddress</p>
<p>LocalTimeZone = @LocalTimeZone</p>
<p>DateTimeNow = @DateTimeNow</p>

<hr />

@code {
    public string? UserAgent { get; set; }
    public string? IPAddress { get; set; }

    public string? contentStringData;

    public string? LocalTimeZone;
    public string? DateTimeNow;

    DataItem[]? revenue2023, revenue2024;

    protected override async Task OnInitializedAsync()
    {
        LocalTimeZone = TimeZoneInfo.Local.ToString();
        DateTimeNow = DateTime.Now.ToString();

        if (httpContextAccessor != null)
        {
            if (httpContextAccessor?.HttpContext?.User.Claims.Count() > 0)
                UserAgent = httpContextAccessor.HttpContext.User.Claims.First(c => c.Type == "jwtToken").ToString();          

            IPAddress = httpContextAccessor?.HttpContext?.Connection?.RemoteIpAddress?.ToString();

            InitGraphData();

            await base.OnInitializedAsync();
        }        
    }

    public async Task GetData()
    {
        contentStringData = await _baseHttpClient.GetApiResponseAsync("Login/GetData");
        StateHasChanged();
    }

    //line chart
    bool smooth = true;
    bool showDataLabels = true;
    bool showMarkers = true;

    class DataItem
    {
        public string? Date { get; set; }
        public double Revenue { get; set; }
    }

    string FormatAsCurrency(object value)
    {
        return ((double)value).ToString();
    }

    public void InitGraphData()
    {
        revenue2023 = new DataItem[] {
            new DataItem
            {
                Date = localizer["jan"],
                Revenue = 234000
            },
            new DataItem
            {
                Date = localizer["feb"],
                Revenue = 269000
            },
            new DataItem
            {
                Date = localizer["mar"],
                Revenue = 233000
            },
            new DataItem
            {
                Date = localizer["apr"],
                Revenue = 244000
            },
            new DataItem
            {
                Date = localizer["may"],
                Revenue = 214000
            },
            new DataItem
            {
                Date = localizer["jun"],
                Revenue = 253000
            },
            new DataItem
            {
                Date = localizer["jul"],
                Revenue = 274000
            },
            new DataItem
            {
                Date = localizer["aug"],
                Revenue = 284000
            },
            new DataItem
            {
                Date = localizer["sept"],
                Revenue = 273000
            },
            new DataItem
            {
                Date = localizer["oct"],
                Revenue = 282000
            },
            new DataItem
            {
                Date = localizer["nov"],
                Revenue = 289000
            },
            new DataItem
            {
                Date = localizer["dec"],
                Revenue = 294000
            }
        };

        revenue2024 = new DataItem[] {
            new DataItem
            {
                Date = localizer["jan"],
                Revenue = 334000
            },
            new DataItem
            {
                Date = localizer["feb"],
                Revenue = 369000
            },
            new DataItem
            {
                Date = localizer["mar"],
                Revenue = 333000
            },
            new DataItem
            {
                Date = localizer["apr"],
                Revenue = 344000
            },
            new DataItem
            {
                Date = localizer["may"],
                Revenue = 314000
            },
            new DataItem
            {
                Date = localizer["jun"],
                Revenue = 353000
            },
            new DataItem
            {
                Date = localizer["jul"],
                Revenue = 374000
            },
            new DataItem
            {
                Date = localizer["aug"],
                Revenue = 384000
            },
            new DataItem
            {
                Date = localizer["sept"],
                Revenue = 373000
            },
            new DataItem
            {
                Date = localizer["oct"],
                Revenue = 382000
            },
            new DataItem
            {
                Date = localizer["nov"],
                Revenue = 389000
            },
            new DataItem
            {
                Date = localizer["dec"],
                Revenue = 394000
            }
        };
    }
}